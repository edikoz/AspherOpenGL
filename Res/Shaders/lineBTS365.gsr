#version 330 core

uniform mat4 u_viewMat;

uniform mat4 u_lensMat1;	//Rotate matrix around u_lensPos
uniform mat4 u_lensMat2;	//Rotate matrix around (0,0,0)
uniform mat4 u_lensMat3;	//Invert rotate matrix around u_lensPos
uniform mat4 u_lensMat4;	//Invert rotate matrix around (0,0,0)

uniform vec4 u_lensParam;	//d,h,w,n
uniform vec3 u_lensPos;		//x,y,z
uniform float u_planePos;	//x cut

uniform vec4 u_opticsParam;		//distance, radius of curvature, size, distance to size
uniform vec3 u_opticsPosition1;	//normal of first mirror
uniform vec3 u_opticsPosition2;	//second mirror's center of sphere
uniform vec3 u_opticsPosition3;	//position of second mirror

layout(lines) in;
layout(line_strip, max_vertices=8) out;
//Коэффициенты уравнения асферической поверхности
//const float p[] = float[](-0.7511717674605809, -1.322645973032321,
// -0.2843865791321925, -0.11512748704538842, 0.171054334747852,
// -0.6223426087724071, 0.5784299899395922, 0.037905142644602166);

const float p[] = float[](-0.3035861, -1.5635236, -4.8505691, -6.290279,
 60.024843, 28.715015, 7.633679, 2.9519508);
	
flat out vec4 col;
out vec4 feedbackOut;
//FAC ЛИНЗА:
//Уравнение асферической поверхности
float polyAspher(float y0){
    return
	(y0*y0/p[0]) / 
	(1.0+sqrt( abs(1.0-(1.0+p[1])*y0*y0/(p[0]*p[0])) )) +
	p[2]*y0*y0*y0*y0 + 
	p[3]*y0*y0*y0*y0*y0*y0  + 
	p[4]*y0*y0*y0*y0*y0*y0*y0*y0 + 
	p[5]*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0 + 
	p[6]*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0 + 
	p[7]*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0;
}
//Система из уравнений прямой и асферической поверхности
vec4 aspherSystem(vec4 A, vec3 cosAng, vec3 R0, vec3 L0){
    vec4 fs;
	fs.xyz = A.w*cosAng + R0 - A.xyz;
    fs.w = polyAspher(A.y - L0.y) + L0.x - A.x;
	return fs;
}
//Производная уравнения асферической поверхности
float dPolyAspher(float y0){
    float sq = sqrt(1.0 - (1.0 + p[1])*y0*y0/(p[0]*p[0]));
    float b = p[0]*(1.0 + sq);
    float db = -(1.0 + p[1])*y0 / (p[0]*sq);
    float dx = ((2.0 * y0) * b - (y0*y0) * db) / (b * b) + 
	4.0*p[2]*y0*y0*y0 + 
	6.0*p[3]*y0*y0*y0*y0*y0 + 
	8.0*p[4]*y0*y0*y0*y0*y0*y0*y0 + 
	10.0*p[5]*y0*y0*y0*y0*y0*y0*y0*y0*y0 + 
	12.0*p[6]*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0 + 
	14.0*p[7]*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0*y0;
	return dx;
}
//Якобиан системы
mat4 jacPolyAspher(vec4 A, vec3 cosAng, vec3 L0){
    mat4 mx = mat4(0.0);
    mx[0][0] = -1.0;
    mx[1][1] = -1.0;
    mx[2][2] = -1.0;
    mx[3][0] = cosAng.x;
    mx[3][1] = cosAng.y;
    mx[3][2] = cosAng.z;
    mx[0][3] = -1.0;
    mx[1][3] = dPolyAspher(A.y - L0.y);
	return mx;
}
//Решение системы уравнений методом Ньютона
vec3 aspherSolver(vec4 k0, vec3 cosAng, vec3 R0, vec3 L0){
    vec4 k1 = k0 - inverse(jacPolyAspher(k0, cosAng, L0))*aspherSystem(k0, cosAng, R0, L0);
	float a = 0.0;
    while (length(k1-k0) >= 1.0e-10 && a < 20.0){ //Epsilon and iterations count
        k0 = k1;
        k1 = k0 - inverse(jacPolyAspher(k0, cosAng, L0))*aspherSystem(k0, cosAng, R0, L0);
		a += 1.0;
    }
	return k1.xyz;
}

//BTS линза:
//Уравнение поверхности BTS
const float BTSradius = 0.6765;//0.362;
const float BTSperiod = 0.5;
const float BTSwidth = 1.5;//1.5;//0.821;//1.65 + 0.0926*2.0;//0.899;//1.65;
const float FAC_BTS_gap = 0.05;
//float P[] = float[]0.37, -0.30);
float BTSinOut;
float BTSequation(in float y0, in float z0){
	float b = mod(y0-z0-BTSperiod/2, BTSperiod) - BTSperiod/2;
    return BTSinOut*sqrt(BTSradius*BTSradius - b*b);
	// y0 = mod(y0-z0-BTSperiod/2, BTSperiod) - BTSperiod/2;
	// return
	// BTSinOut*(y0*y0/P[0]) / 
	// (1.0+sqrt( abs(1.0-(1.0+P[1])*y0*y0/(P[0]*P[0])) ));
}
//Система из уравнений прямой и поверхности BTS
vec4 BTSsystem(vec4 A, vec3 cosAng, vec3 R0, vec3 L0){
    vec4 fs;
	fs.xyz = A.w*cosAng + R0 - A.xyz;
    fs.w = BTSequation(A.y - L0.y, A.z - L0.z) + L0.x - A.x;
	return fs;
}
//Производная уравнения поверхности BTS
float dBTSequation(in float y0, in float z0){
	float b = mod(y0-z0-BTSperiod/2, BTSperiod) - BTSperiod/2;
	return BTSinOut*b/sqrt( BTSradius*BTSradius - b*b );
	
	// y0 = mod(y0-z0-BTSperiod/2, BTSperiod) - BTSperiod/2;
	// float sq = sqrt(1.0 - (1.0 + P[1])*y0*y0/(P[0]*P[0]));
    // float b = P[0]*(1.0 + sq);
    // float db = -(1.0 + P[1])*y0 / (P[0]*sq);
    // return BTSinOut*((2.0 * y0) * b - (y0*y0) * db) / (b * b);
}
//Якобиан системы
mat4 jacBTSequation(vec4 A, vec3 cosang, vec3 L0){
    mat4 mx = mat4(0.0);
    mx[0][0] = -1.0;
    mx[1][1] = -1.0;
    mx[2][2] = -1.0;
    mx[3][0] = cosang.x;
    mx[3][1] = cosang.y;
    mx[3][2] = cosang.z;
    mx[0][3] = -1.0;
    mx[1][3] = -dBTSequation(A.y - L0.y, A.z - L0.z);
    mx[2][3] = dBTSequation(A.y - L0.y, A.z - L0.z);
	return mx;
}
//Решение системы уравнений методом Ньютона
vec3 BTSsolver(vec4 k0, vec3 cosAng, vec3 R0, vec3 L0){
    vec4 k1 = k0 - inverse(jacBTSequation(k0, cosAng, L0))*BTSsystem(k0, cosAng, R0, L0);
	float a = 0.0;
    while (length(k1-k0) >= 1.0e-10 && a < 20.0){ //Epsilon and iterations count
        k0 = k1;
        k1 = k0 - inverse(jacBTSequation(k0, cosAng, L0))*BTSsystem(k0, cosAng, R0, L0);
		a += 1.0;
    }
	return k1.xyz;
}

struct Ray{
	vec3 origin, direction;
} r1, r2, r3, r4, r5, r6, r7;
//Пересечение луча со сферой
float intersectSphereF(Ray ray, vec3 sph, const float r){
	vec3 k = ray.origin - sph;
	float a = dot ( ray.direction, ray.direction );
	float b = dot ( ray.direction, k );
	float c = dot ( k, k ) - r * r;
	float d = b * b - a * c;
	float t = 0.0;
	if ( d > 0.0 ){
		float sd = sqrt ( d );
		float t1 = ( -b - sd ) / a;
		float t2 = ( -b + sd ) / a;
		float min_t = min(t1,t2);
		float max_t = max(t1,t2);
		t = (min_t >= 0.0) ? min_t : max_t;
	}
	return t;
}

void emit(in vec4 e_col, in vec4 e_pos){
	col = e_col;
	feedbackOut = e_pos;
	gl_Position = u_viewMat*feedbackOut; 
	EmitVertex();
}

//Ну-с начнём!
void main(){
	//Emit point (laser diode position)
	r1.origin = (u_lensMat1*gl_in[0].gl_Position).xyz;
	r1.direction = (u_lensMat2*gl_in[1].gl_Position).xyz;
	
	//First surface (FAC in)
    r2.origin = (u_lensPos.x-r1.origin.x)*r1.direction/r1.direction.x + r1.origin;
	r2.direction = refract(r1.direction, vec3(-1.0, 0.0, 0.0), 1.0/u_lensParam.w);
	
	//Second surface (FAC out)
	r3.origin = aspherSolver( vec4(u_lensPos.x+u_lensParam.x, 0, 0, u_lensPos.x),
		r2.direction, r2.origin, vec3(u_lensPos.x+u_lensParam.x, u_lensPos.y, u_lensPos.z));
	vec3 vn1 = normalize(vec3(-1.0, dPolyAspher(r3.origin.y - u_lensPos.y), 0.0));
	r3.direction = refract(r2.direction, vn1, u_lensParam.w);
	
	//r3.origin = r2.origin = r1.origin;
	//r3.direction = r2.direction = r1.direction;
	
	//Third surface (BTS in)
	BTSinOut = -1.0;
	r4.origin = BTSsolver(vec4(u_lensPos.x+u_lensParam.x, 0, 0, FAC_BTS_gap),
		r3.direction, r3.origin,
		vec3(u_lensPos.x+u_lensParam.x + BTSradius + FAC_BTS_gap, u_lensPos.y, u_lensPos.z));
	float nBi = -dBTSequation(r4.origin.y - u_lensPos.y, r4.origin.z - u_lensPos.z);
	vec3 vnBi = normalize(vec3(-1.0, nBi, -nBi));
	r4.direction = refract(r3.direction, vnBi, 1.0/1.823);
	
	//Fourth surface (BTS out)
	BTSinOut = 1.0;
	r5.origin = BTSsolver(vec4(u_lensPos.x+u_lensParam.x + BTSwidth, 0, 0, BTSwidth),
		r4.direction, r4.origin,
		vec3(u_lensPos.x+u_lensParam.x + BTSwidth - BTSradius + FAC_BTS_gap, u_lensPos.y, u_lensPos.z));
	float nBo = -dBTSequation(r5.origin.y - u_lensPos.y, r5.origin.z - u_lensPos.z);
	vec3 vnBo = normalize(vec3(-1.0, nBo, -nBo));
	r5.direction = refract(r4.direction, vnBo, 1.823);
	
	//r5.origin = r4.origin = r3.origin;
	//r5.direction = r4.direction = r3.direction;
	
	//Fifth surface(MIRROR)
	vec3 X = (u_lensMat3*vec4(r5.origin, 1.0)).xyz;
	vec3 dir3 = (u_lensMat4*vec4(r5.direction, 1.0)).xyz;
	vec3 A = vec3(u_opticsParam.x, 0.0, 0.0);
	vec3 V = A - X;
	float d = dot(u_opticsPosition1, V);
	float e = dot(u_opticsPosition1, dir3);
	r6.origin = X + dir3 * d/e;
	r6.direction = reflect(dir3, u_opticsPosition1);
	
	//Sixth surface(MIRROR)
	r7.origin = r6.direction*intersectSphereF(r6, u_opticsPosition2, u_opticsParam.y) + r6.origin;
	vec3 vn2 = normalize(u_opticsPosition2 - r7.origin);
	r7.direction = reflect(r6.direction, vn2);
	
	//r7.origin = r6.origin = X;
	//r7.direction = r6.direction = dir3;
	//Fifth surface (LENS in)
	/*const float lensRefraction = 1.5106;
	const float u_lensDistance = 100.0;
	const float lensRadius = 51.5;
	const float lensWidth = 9.7;
	const float lensThickness = 3.0;
	vec3 rr1 = (u_lensMat3*vec4(r5.origin, 1.0)).xyz;
	vec3 rr2 = (u_lensMat4*vec4(r5.direction, 1.0)).xyz;
    r6.origin = (u_planePos-u_lensDistance-lensWidth-rr1.x)*rr2/rr2.x + rr1;
	r6.direction = refract(rr2, vec3(-1.0, 0.0, 0.0), 1.0/1.823);
	
	//Sixth surface (LENS out)
	vec3 lensPos = vec3(u_planePos-u_lensDistance-lensRadius, 0.0, 0.0);;
	r7.origin = r6.direction*intersectSphereF(r6, lensPos, lensRadius) + r6.origin;
	vec3 vn2 = normalize(lensPos - r7.origin);
	r7.direction = refract(r6.direction, vn2, 1.823);*/
	
	//Camera's sensor surface
	vec3 rayOut = (u_planePos-r7.origin.x)*r7.direction/(r7.direction.x)+r7.origin;
	//vec3 rayOut = r7.origin + r7.direction*10.0;
	
	if (all( lessThan(abs(r2.origin.yz-u_lensPos.yz), u_lensParam.yz*0.5) ))
	if (all( lessThan(abs(r3.origin.yz-u_lensPos.yz), u_lensParam.yz*0.5) ))
	if (distance( r6.origin, A ) < u_opticsParam.z)
	if (distance( r7.origin, u_opticsPosition3 ) < u_opticsParam.w)
	if (all( not(isnan(r2.origin)) ) && all( not(isinf(r2.origin)) ))
	if (all( not(isnan(r3.origin)) ) && all( not(isinf(r3.origin)) ))
	if (all( not(isnan(r4.origin)) ) && all( not(isinf(r4.origin)) ))
	if (all( not(isnan(r5.origin)) ) && all( not(isinf(r5.origin)) ))
	if (all( not(isnan(r6.origin)) ) && all( not(isinf(r6.origin)) ))
	if (all( not(isnan(r7.origin)) ) && all( not(isinf(r7.origin)) ))
	if (all( not(isnan(rayOut)) ) && all( not(isinf(rayOut)) ))
	{
		const float tr = 1.0;
		emit(vec4(tr,0.0,0.0,tr), gl_in[0].gl_Position);
		emit(vec4(0.0,tr,tr,tr), u_lensMat3*vec4(r2.origin, 1.0));
		emit(vec4(0.0,tr,0.0,tr), u_lensMat3*vec4(r3.origin, 1.0));
		emit(vec4(tr,0.0,tr,tr), u_lensMat3*vec4(r4.origin, 1.0));
		emit(vec4(0.0,tr,tr,tr), u_lensMat3*vec4(r5.origin, 1.0));
		emit(vec4(tr,0.0,tr,tr), vec4(r6.origin, 1.0));
		emit(vec4(tr,0.0,0.0,tr), vec4(r7.origin, 1.0));
		emit(vec4(0.0,tr,0.0,tr), vec4(rayOut, 1.0));
	}
	EndPrimitive();
}